RESUMO PARA AJUSTE DO FRONTEND
================================

ENDPOINT ATUALIZADO: /api/v1/devices

MUDAN√áAS IMPLEMENTADAS:
- O endpoint agora retorna automaticamente a √∫ltima leitura (lastReading) e as √∫ltimas 5 leituras (readings) de cada dispositivo
- N√£o √© mais necess√°rio fazer m√∫ltiplas requisi√ß√µes para obter essas informa√ß√µes

ESTRUTURA DA RESPOSTA:
{
  "data": [
    {
      "_id": "684b0814b519347611d18a04",
      "name": "HEMOACRE",
      "settings": { "tempMin": 2, "tempMax": 30 },
      "status": "active",
      // ... outras propriedades existentes
      
      // NOVO: √öltima leitura
      "lastReading": {
        "temperature": 7.5,
        "humidity": 60,
        "timestamp": "2025-01-18T15:05:46.102Z"
      },
      
      // NOVO: √öltimas 5 leituras
      "readings": [
        {
          "temperature": 7.5,
          "humidity": 60,
          "timestamp": "2025-01-18T15:05:46.102Z"
        },
        {
          "temperature": 7.2,
          "humidity": 58,
          "timestamp": "2025-01-18T15:00:46.102Z"
        }
        // ... at√© 5 leituras
      ]
    }
  ],
  "totalPages": 1,
  "currentPage": 1,
  "totalItems": 1
}

COMO USAR NO FRONTEND:

1. REQUISI√á√ÉO (mant√©m a mesma):
const response = await axios.get('/api/v1/devices', {
  headers: { 'Authorization': `Bearer ${token}` }
});
const devices = response.data.data;

2. EXIBIR √öLTIMA LEITURA:
{device.lastReading ? (
  <div>
    <p>Temperatura: {device.lastReading.temperature}¬∞C</p>
    <p>Humidade: {device.lastReading.humidity}%</p>
    <p>Hora: {new Date(device.lastReading.timestamp).toLocaleString('pt-BR')}</p>
  </div>
) : (
  <p>Nenhuma leitura dispon√≠vel</p>
)}

3. CALCULAR M√âDIA DAS √öLTIMAS 5 LEITURAS:
const averageTemperature = device.readings && device.readings.length > 0
  ? (device.readings.reduce((sum, reading) => sum + reading.temperature, 0) / device.readings.length).toFixed(1)
  : 'N/A';

const averageHumidity = device.readings && device.readings.length > 0
  ? (device.readings.reduce((sum, reading) => sum + (reading.humidity || 0), 0) / device.readings.length).toFixed(1)
  : 'N/A';

4. EXIBIR HIST√ìRICO DAS √öLTIMAS 5 LEITURAS:
{device.readings && device.readings.length > 0 && (
  <div>
    <h4>√öltimas {device.readings.length} leituras:</h4>
    {device.readings.map((reading, index) => (
      <div key={index}>
        <span>{reading.temperature}¬∞C</span>
        <span>{reading.humidity}%</span>
        <span>{new Date(reading.timestamp).toLocaleTimeString('pt-BR')}</span>
      </div>
    ))}
  </div>
)}

BENEF√çCIOS:
- Uma √∫nica requisi√ß√£o em vez de m√∫ltiplas
- Dados sempre sincronizados
- F√°cil c√°lculo de m√©dias
- Melhor performance

NOTAS IMPORTANTES:
- Se n√£o houver leituras, lastReading ser√° null e readings ser√° array vazio
- O deviceKey continua sendo retornado apenas para admins
- Todas as funcionalidades existentes (pagina√ß√£o, pesquisa, permiss√µes) continuam funcionando
- A estrutura de resposta mant√©m compatibilidade com o c√≥digo existente

EXEMPLO DE CARD ATUALIZADO:
<div className="device-card">
  <h3>{device.name}</h3>
  
  {/* √öltima leitura */}
  {device.lastReading ? (
    <div>
      <p>üå°Ô∏è {device.lastReading.temperature}¬∞C</p>
      <p>üíß {device.lastReading.humidity}%</p>
      <p>üïê {new Date(device.lastReading.timestamp).toLocaleString('pt-BR')}</p>
    </div>
  ) : (
    <p>Nenhuma leitura dispon√≠vel</p>
  )}
  
  {/* M√©dia das √∫ltimas 5 leituras */}
  {device.readings && device.readings.length > 0 && (
    <div>
      <p>M√©dia: {averageTemperature}¬∞C / {averageHumidity}%</p>
    </div>
  )}
</div> 